/* Containers */

.container,
.container-full {
  width: 100%;
  margin-left: auto;
  margin-right: auto;
  padding: 0 #{$grid-gap * 0.5};
}

@each $breakpoint, $max-width in map-remove($container-widths, xs) {
  @include media-min-width($breakpoint) {
    .container {
      width: $max-width;
    }
  }
}

/* Rows & columns */

.row {
  display: flex;
  flex-wrap: wrap;
  margin-left: -0.5 * $grid-gap;
  margin-right: -0.5 * $grid-gap;

  .col,
  [class*='col-'] {
    padding-left: 0.5 * $grid-gap;
    padding-right: 0.5 * $grid-gap;
  }
}

.col {
  flex: 1 0 0;
}

[class*='col-'] {
  flex: 0 0 auto;
  width: 100%;
}

.col-auto {
  width: auto;
}

@for $count from 1 through 12 {
  .col-#{$count} {
    width: calc(100% * #{$count} / 12);
  }

  .col-offset-#{$count - 1} {
    margin-left: calc(100% * #{$count - 1} / 12);
  }
}

@each $breakpoint, $width in map-remove($breakpoints, xs) {
  @include media-min-width($breakpoint) {
    @for $count from 1 through 12 {
      .col-#{$breakpoint}-#{$count} {
        width: calc(100% * #{$count} / 12);
      }

      .col-offset-#{$breakpoint}-#{$count - 1} {
        margin-left: calc(100% * #{$count - 1} / 12);
      }
    }

    .col-#{$breakpoint}-auto {
      width: auto;
    }
  }
}

/* Order */

@for $count from 1 through 12 {
  .order-#{$count} {
    order: $count;
  }
}

@each $breakpoint, $width in map-remove($breakpoints, xs) {
  @include media-min-width($breakpoint) {
    @for $count from 1 through 12 {
      .order-#{$breakpoint}-#{$count} {
        order: $count;
      }
    }

    .order-#{$breakpoint}-none {
      order: initial;
    }
  }
}
